Parameters:
  InstanceVersion:
    Type: String
    Default: "latest"

Resources:
  MyLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      ImageId: ami-03ca36368dbc9cfa1
      SecurityGroups:
        - !Ref MySecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Updating system packages..."
          yum update -y
          echo "Installing Docker..."
          dnf install docker -y
          echo "Starting Docker..."
          systemctl start docker
          echo "Adding ec2-user to Docker group..."
          usermod -a -G docker ec2-user

          echo "Logging into Amazon ECR..."
          $(aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 897729109985.dkr.ecr.eu-west-1.amazonaws.com)

          echo "Pulling the latest Docker image..."
          docker pull --quiet --disable-content-trust=true 897729109985.dkr.ecr.eu-west-1.amazonaws.com/alex_it_infra_project:${InstanceVersion}

          echo "Stopping any running containers..."
          docker stop $(docker ps -q --filter ancestor=897729109985.dkr.ecr.eu-west-1.amazonaws.com/alex_it_infra_project:${InstanceVersion}) || true

          echo "Removing the old Docker image..."
          docker rmi 897729109985.dkr.ecr.eu-west-1.amazonaws.com/alex_it_infra_project:${InstanceVersion} || true

          echo "Running the new Docker container..."
          docker run -d -p 80:8080 --rm 897729109985.dkr.ecr.eu-west-1.amazonaws.com/alex_it_infra_project:${InstanceVersion}

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref MyLaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      AvailabilityZones: !GetAZs ''
      TargetGroupARNs:
        - !Ref MyTargetGroup
      Tags:
        - Key: Name
          Value: MyEC2Instance
          PropagateAtLaunch: true

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref MySecurityGroup
      Subnets: 
        - subnet-0df5f35e24f2ad1b5
        - subnet-0fe0163065a6cc46b
      Tags:
        - Key: Name
          Value: MyLoadBalancer

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Protocol: HTTP
      Port: 80
      TargetType: instance
      VpcId: 'vpc-0acfaa03995941f03' 
      HealthCheckEnabled: true

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECRAccessRole

  ECRAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: "*"
